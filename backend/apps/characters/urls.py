# apps/characters/urls.py - URLs da API

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Router para ViewSets
router = DefaultRouter()
router.register(r'races', views.RaceViewSet)
router.register(r'classes', views.CharacterClassViewSet)
router.register(r'backgrounds', views.BackgroundViewSet)
router.register(r'characters', views.CharacterViewSet, basename='character')
router.register(r'spells', views.SpellSearchView, basename='spell')
router.register(r'campaigns', views.CampaignViewSet, basename='campaign')

# URLs
urlpatterns = [
    # URLs do router
    path('', include(router.urls)),
    
    # URLs auxiliares para cria√ß√£o de personagem
    path('creation-data/', views.character_creation_data, name='character-creation-data'),
    path('validate-creation/', views.validate_character_creation, name='validate-character-creation'),
]

# ===================================
# DOCUMENTA√á√ÉO DAS ROTAS DA API
# ===================================

"""
üìã ENDPOINTS DISPON√çVEIS:

# ========================================
# AUTENTICA√á√ÉO (implementar em apps.accounts)
# ========================================
POST   /api/auth/login/           # Login
POST   /api/auth/logout/          # Logout
POST   /api/auth/register/        # Registro
GET    /api/auth/user/            # Dados do usu√°rio atual

# ========================================
# RA√áAS
# ========================================
GET    /api/characters/races/                    # Listar ra√ßas
GET    /api/characters/races/{id}/               # Detalhes de ra√ßa
POST   /api/characters/races/{id}/sync_api_data/ # Sincronizar com API

# ========================================
# CLASSES
# ========================================
GET    /api/characters/classes/                        # Listar classes
GET    /api/characters/classes/{id}/                   # Detalhes de classe
GET    /api/characters/classes/{id}/level_progression/ # Progress√£o completa
GET    /api/characters/classes/{id}/progression_by_level/?level=5 # Progress√£o por n√≠vel

# Filtros dispon√≠veis:
# ?is_spellcaster=true
# ?spell_slots_type=full
# ?hit_die=8

# ========================================
# BACKGROUNDS
# ========================================
GET    /api/characters/backgrounds/     # Listar backgrounds
GET    /api/characters/backgrounds/{id}/ # Detalhes de background

# ========================================
# PERSONAGENS
# ========================================
GET    /api/characters/characters/              # Listar meus personagens
POST   /api/characters/characters/              # Criar personagem
GET    /api/characters/characters/{id}/         # Detalhes de personagem
PUT    /api/characters/characters/{id}/         # Atualizar personagem
PATCH  /api/characters/characters/{id}/         # Atualiza√ß√£o parcial
DELETE /api/characters/characters/{id}/         # Deletar personagem

# Actions especiais para personagens:
POST   /api/characters/characters/{id}/level_up/      # Subir n√≠vel
POST   /api/characters/characters/{id}/rest/          # Descanso
POST   /api/characters/characters/{id}/take_damage/   # Aplicar dano
POST   /api/characters/characters/{id}/heal/          # Curar
POST   /api/characters/characters/{id}/use_spell_slot/ # Usar spell slot

# Gest√£o de feiti√ßos:
GET    /api/characters/characters/{id}/spells/        # Listar feiti√ßos
POST   /api/characters/characters/{id}/add_spell/     # Adicionar feiti√ßo
DELETE /api/characters/characters/{id}/remove_spell/  # Remover feiti√ßo

# Filtros de personagens:
# ?race=1
# ?character_class=2
# ?level=5
# ?search=gandalf

# ========================================
# FEITI√áOS (Open5e API)
# ========================================
GET    /api/characters/spells/search/              # Buscar feiti√ßos
GET    /api/characters/spells/detail/?slug=fireball # Detalhes de feiti√ßo
GET    /api/characters/spells/for_class/?class=wizard # Feiti√ßos por classe

# Par√¢metros de busca:
# ?q=fire               # Busca por nome
# ?class=wizard         # Filtrar por classe
# ?level=3              # Filtrar por n√≠vel
# ?school=evocation     # Filtrar por escola
# ?limit=50             # Limite de resultados

# ========================================
# CAMPANHAS
# ========================================
GET    /api/characters/campaigns/            # Minhas campanhas
POST   /api/characters/campaigns/            # Criar campanha
GET    /api/characters/campaigns/{id}/       # Detalhes de campanha
PUT    /api/characters/campaigns/{id}/       # Atualizar campanha
DELETE /api/characters/campaigns/{id}/       # Deletar campanha

# Actions de campanha:
POST   /api/characters/campaigns/{id}/join/       # Entrar na campanha
POST   /api/characters/campaigns/{id}/leave/      # Sair da campanha
GET    /api/characters/campaigns/{id}/characters/ # Personagens da campanha

# ========================================
# UTILIT√ÅRIOS
# ========================================
GET    /api/characters/creation-data/     # Dados para cria√ß√£o de personagem
POST   /api/characters/validate-creation/ # Validar cria√ß√£o sem criar

# ========================================
# EXEMPLOS DE USO
# ========================================

# 1. Criar personagem:
POST /api/characters/characters/
{
  "name": "Gandalf",
  "race": 1,
  "character_class": 2,
  "background": 3,
  "base_strength": 8,
  "base_dexterity": 14,
  "base_constitution": 13,
  "base_intelligence": 15,
  "base_wisdom": 12,
  "base_charisma": 10
}

# 2. Subir n√≠vel:
POST /api/characters/characters/1/level_up/
{
  "confirm": true
}

# 3. Descanso longo:
POST /api/characters/characters/1/rest/
{
  "rest_type": "long"
}

# 4. Aplicar dano:
POST /api/characters/characters/1/take_damage/
{
  "damage": 8,
  "damage_type": "slashing"
}

# 5. Buscar feiti√ßos:
GET /api/characters/spells/search/?class=wizard&level=1&limit=20

# 6. Adicionar feiti√ßo:
POST /api/characters/characters/1/add_spell/
{
  "spell_slug": "magic-missile",
  "spell_name": "Magic Missile",
  "spell_level": 1,
  "is_prepared": true,
  "is_known": true
}

# ========================================
# C√ìDIGOS DE RESPOSTA
# ========================================

# 200 OK               - Sucesso
# 201 Created          - Criado com sucesso
# 400 Bad Request      - Dados inv√°lidos
# 401 Unauthorized     - N√£o autenticado
# 403 Forbidden        - Sem permiss√£o
# 404 Not Found        - N√£o encontrado
# 500 Internal Error   - Erro do servidor

# ========================================
# ESTRUTURA DE RESPOSTA PADR√ÉO
# ========================================

# Sucesso:
{
  "success": true,
  "message": "Opera√ß√£o realizada com sucesso",
  "data": { ... }
}

# Erro:
{
  "success": false,
  "error": "Descri√ß√£o do erro",
  "details": { ... }  // Opcional
}

# Lista paginada:
{
  "count": 42,
  "next": "http://api/next-page/",
  "previous": null,
  "results": [ ... ]
}
"""